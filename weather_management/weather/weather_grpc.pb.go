// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: weather/weather.proto

package weather_management

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherClient is the client API for Weather service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherClient interface {
	// Simple RPC
	AddCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error)
	// Server to Client streaming RPC
	MultiLangWeather(ctx context.Context, in *City, opts ...grpc.CallOption) (Weather_MultiLangWeatherClient, error)
	// Client to Server streaming RPC
	WeatherInLang(ctx context.Context, opts ...grpc.CallOption) (Weather_WeatherInLangClient, error)
	// BiDirectional Streaming RPC
	MultiCityWeather(ctx context.Context, opts ...grpc.CallOption) (Weather_MultiCityWeatherClient, error)
}

type weatherClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherClient(cc grpc.ClientConnInterface) WeatherClient {
	return &weatherClient{cc}
}

func (c *weatherClient) AddCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/weather.Weather/AddCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherClient) MultiLangWeather(ctx context.Context, in *City, opts ...grpc.CallOption) (Weather_MultiLangWeatherClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weather_ServiceDesc.Streams[0], "/weather.Weather/MultiLangWeather", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherMultiLangWeatherClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Weather_MultiLangWeatherClient interface {
	Recv() (*WeatherInfo, error)
	grpc.ClientStream
}

type weatherMultiLangWeatherClient struct {
	grpc.ClientStream
}

func (x *weatherMultiLangWeatherClient) Recv() (*WeatherInfo, error) {
	m := new(WeatherInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherClient) WeatherInLang(ctx context.Context, opts ...grpc.CallOption) (Weather_WeatherInLangClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weather_ServiceDesc.Streams[1], "/weather.Weather/WeatherInLang", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherWeatherInLangClient{stream}
	return x, nil
}

type Weather_WeatherInLangClient interface {
	Send(*City) error
	CloseAndRecv() (*WeatherInfoArray, error)
	grpc.ClientStream
}

type weatherWeatherInLangClient struct {
	grpc.ClientStream
}

func (x *weatherWeatherInLangClient) Send(m *City) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weatherWeatherInLangClient) CloseAndRecv() (*WeatherInfoArray, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(WeatherInfoArray)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *weatherClient) MultiCityWeather(ctx context.Context, opts ...grpc.CallOption) (Weather_MultiCityWeatherClient, error) {
	stream, err := c.cc.NewStream(ctx, &Weather_ServiceDesc.Streams[2], "/weather.Weather/MultiCityWeather", opts...)
	if err != nil {
		return nil, err
	}
	x := &weatherMultiCityWeatherClient{stream}
	return x, nil
}

type Weather_MultiCityWeatherClient interface {
	Send(*City) error
	Recv() (*WeatherInfo, error)
	grpc.ClientStream
}

type weatherMultiCityWeatherClient struct {
	grpc.ClientStream
}

func (x *weatherMultiCityWeatherClient) Send(m *City) error {
	return x.ClientStream.SendMsg(m)
}

func (x *weatherMultiCityWeatherClient) Recv() (*WeatherInfo, error) {
	m := new(WeatherInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WeatherServer is the server API for Weather service.
// All implementations must embed UnimplementedWeatherServer
// for forward compatibility
type WeatherServer interface {
	// Simple RPC
	AddCity(context.Context, *City) (*City, error)
	// Server to Client streaming RPC
	MultiLangWeather(*City, Weather_MultiLangWeatherServer) error
	// Client to Server streaming RPC
	WeatherInLang(Weather_WeatherInLangServer) error
	// BiDirectional Streaming RPC
	MultiCityWeather(Weather_MultiCityWeatherServer) error
	mustEmbedUnimplementedWeatherServer()
}

// UnimplementedWeatherServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherServer struct {
}

func (UnimplementedWeatherServer) AddCity(context.Context, *City) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCity not implemented")
}
func (UnimplementedWeatherServer) MultiLangWeather(*City, Weather_MultiLangWeatherServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiLangWeather not implemented")
}
func (UnimplementedWeatherServer) WeatherInLang(Weather_WeatherInLangServer) error {
	return status.Errorf(codes.Unimplemented, "method WeatherInLang not implemented")
}
func (UnimplementedWeatherServer) MultiCityWeather(Weather_MultiCityWeatherServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiCityWeather not implemented")
}
func (UnimplementedWeatherServer) mustEmbedUnimplementedWeatherServer() {}

// UnsafeWeatherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherServer will
// result in compilation errors.
type UnsafeWeatherServer interface {
	mustEmbedUnimplementedWeatherServer()
}

func RegisterWeatherServer(s grpc.ServiceRegistrar, srv WeatherServer) {
	s.RegisterService(&Weather_ServiceDesc, srv)
}

func _Weather_AddCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(City)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServer).AddCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.Weather/AddCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServer).AddCity(ctx, req.(*City))
	}
	return interceptor(ctx, in, info, handler)
}

func _Weather_MultiLangWeather_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(City)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeatherServer).MultiLangWeather(m, &weatherMultiLangWeatherServer{stream})
}

type Weather_MultiLangWeatherServer interface {
	Send(*WeatherInfo) error
	grpc.ServerStream
}

type weatherMultiLangWeatherServer struct {
	grpc.ServerStream
}

func (x *weatherMultiLangWeatherServer) Send(m *WeatherInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _Weather_WeatherInLang_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeatherServer).WeatherInLang(&weatherWeatherInLangServer{stream})
}

type Weather_WeatherInLangServer interface {
	SendAndClose(*WeatherInfoArray) error
	Recv() (*City, error)
	grpc.ServerStream
}

type weatherWeatherInLangServer struct {
	grpc.ServerStream
}

func (x *weatherWeatherInLangServer) SendAndClose(m *WeatherInfoArray) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weatherWeatherInLangServer) Recv() (*City, error) {
	m := new(City)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Weather_MultiCityWeather_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WeatherServer).MultiCityWeather(&weatherMultiCityWeatherServer{stream})
}

type Weather_MultiCityWeatherServer interface {
	Send(*WeatherInfo) error
	Recv() (*City, error)
	grpc.ServerStream
}

type weatherMultiCityWeatherServer struct {
	grpc.ServerStream
}

func (x *weatherMultiCityWeatherServer) Send(m *WeatherInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *weatherMultiCityWeatherServer) Recv() (*City, error) {
	m := new(City)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Weather_ServiceDesc is the grpc.ServiceDesc for Weather service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Weather_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weather.Weather",
	HandlerType: (*WeatherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCity",
			Handler:    _Weather_AddCity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiLangWeather",
			Handler:       _Weather_MultiLangWeather_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WeatherInLang",
			Handler:       _Weather_WeatherInLang_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "MultiCityWeather",
			Handler:       _Weather_MultiCityWeather_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "weather/weather.proto",
}
